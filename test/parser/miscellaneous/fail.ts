import { fail } from '../core';
import { Context } from '../../../src/parser/common';

fail('Miscellaneous - Fail', [
  ['a: let {}', Context.Empty],
  ['a = let {}', Context.Empty],
  [
    `a = let
  []`,
    Context.Empty
  ],
  ['/(?<a', Context.Empty],
  ['/(?<abc\\u{9991D7D0}def>foo\\k<abc\\u{1D7D0}def>)/', Context.Empty],
  ['0b', Context.Empty],
  ['0e', Context.Empty],
  ['1e-', Context.Empty],
  ['1e+', Context.Empty],
  ['"use strict"; function* eval(){}', Context.OptionsRaw],
  ['"use strict"; !function* arguments(){}', Context.Empty],
  ['"use strict"; function* package(){}', Context.Empty],
  ['"use strict"; !function* package(){}', Context.Empty],
  ['function* eval(){"use strict";} ', Context.Empty],
  ['!function* arguments(){"use strict";}', Context.Empty],
  ['function* package(){"use strict";}', Context.Empty],
  ['!function* package(){"use strict";} ', Context.Empty],
  ['function a() {"use strict"; (function arguments() { }()) }', Context.OptionsRaw],
  ['for(let a of b) d: function c(){}', Context.Empty],
  ['for(var a in b) d: function c(){}', Context.Empty],
  ["package => {'use strict'}", Context.Empty],
  ['debugger /foo/', Context.Empty],
  ['for (;a);', Context.OptionsRaw],
  [
    `for (var x
    /foo/;;);`,
    Context.Empty
  ],
  [
    `function protected(){
    for(;;)
      switch(x){
        default:
      }
  }
  const protected = x, function arguments(){}`,
    Context.Empty
  ],
  ['async function foo(a = () => { "use strict"; return eval =>("x"); }) {}', Context.Empty],
  ['[...{a = 0}.x] = [];', Context.Empty],
  ['let [o.x=1]=[]', Context.Empty],
  ['[[(x, y)]] = x;', Context.Empty],
  ['[[(x, y)]] = x;', Context.Empty],
  ['let {x:o.f=1}={x:1}', Context.Empty],
  ['[...(a,b)] = [],', Context.Empty],
  ['for (+i in {});', Context.Empty],
  [
    `/x
  y/`,
    Context.Empty
  ],
  ['for(let.a of 0);', Context.Empty],
  ['for([] = 0 of {});', Context.Empty],
  ['for({p: x} = 0 of {});', Context.Empty],
  ['for({x} = 0 of {});', Context.Empty],
  ['async function f() { for await ({0: a = 1} = 1 of []) ; }', Context.Empty],
  ['async function f() { for await ([a] = 1 of []) ; }', Context.Empty],
  ['const [(x)] = []', Context.Empty],
  ['[(++[])', Context.Empty],
  ['((x,x)) = 5', Context.Empty],
  ['({a: {b = 0}.x} = {});', Context.Empty],
  ['for([...a] = 0 of {});', Context.Empty],
  ['for({} = 0 of {});', Context.Empty],
  ['for({x = 0} = 0 of {});', Context.Empty],
  ['for(let.a of 0);', Context.Empty],
  ['for ((a?b:c) in y)z;', Context.Empty],
  ['for ((a,b) in c);', Context.Empty],
  ['class x { t() { a, class o {;set get * get set(){};;;} } }', Context.Empty],
  ['function Y(){ a, class W extends super() {set "x"(X){}set "x"(Q){}async constructor(){};} }', Context.Empty],
  ['let x = class {async *1(){}get set async($){};}', Context.Empty],
  ['(class S extends W {;async *[super.foo](){};})', Context.Empty],
  ['let M = class extends super() {;async *constructor(){};}', Context.Empty],
  ['class A extends super() {;get async(){}* get [{}](){};;}', Context.Empty],
  ['class m extends super() {;async async 3.(){};;get "constructor"(){}}', Context.Empty],
  ['class s extends super.foo {;get get(){}async *"y"(){}async *async(){}}', Context.Empty],
  ['for ((a,b) in c);', Context.Empty],
  ['for ((a,b) in c);', Context.Empty],
  ['for ((a,b) in c);', Context.Empty],
  ['for ((a,b) in c);', Context.Empty],
  ['for ((a,b) in c);', Context.Empty],
  ['function arguments(){}v:switch(x){default:}let arguments=l', Context.Empty],
  ['function protected(){for(;;)switch(x){default:}}const protected=x', Context.Empty],
  ['#', Context.Empty],
  ['@', Context.Empty],
  [
    `function f(x=b
        ++c){}`,
    Context.Empty
  ],
  [
    `for (b
    ++c;;);`,
    Context.Empty
  ],
  [
    `for (b
      ++c;;);`,
    Context.Empty
  ],
  [
    `for (b
        ++c;;);`,
    Context.Empty
  ],
  [
    `for (;b
    ++c;);`,
    Context.Empty
  ],
  [
    `if (b
    ++c);`,
    Context.Empty
  ],
  ['({ __proto__: 1, __proto__: 2 })', Context.Empty],
  ['({ __proto__: null, "__proto__": null })', Context.Empty],
  ['({ __proto__: null, "__proto__": null })', Context.Empty],
  ['"use strict"; ({ __proto__: 1, __proto__: 2 })', Context.Empty],
  ['({__proto__: a, __proto__: b});', Context.Empty],
  ['([{web: false, __proto__: a, __proto__: b}]);', Context.Empty],
  ['({web: false, __proto__: a, __proto__: b});', Context.Empty],
  ['({__proto__: a, __proto__: b});', Context.OptionsRaw],
  ['({__proto__: a, __proto__: b});', Context.OptionsRaw],
  ['async ({__proto__: a, __proto__: b});', Context.Empty],
  ['(break) => {"use strict";}', Context.Empty],
  ['for (;;) {}}dsadsa', Context.Empty],
  ['for ({[a]: ""[b] = c} of d) {}}', Context.Empty],
  ['for ({[a]: ""[b] = c} of d) {}})', Context.Empty],
  ['(break) => {}', Context.Empty],
  [
    ` for await (a of b) let
  [] = y`,
    Context.Empty
  ],
  ['for (a of b) let [x] = y', Context.Empty],
  ['({1: ({}) += (1)});', Context.Empty],
  ['({1: ({}) = (1)});', Context.Empty],
  ['function ** gen() { }', Context.Empty],
  ['0b07n', Context.Empty],
  ['x/{c:/ /=>', Context.Empty],
  ['+{f(){}==', Context.Empty],
  ['with {a}', Context.OptionsRaw],
  ['with (ex)', Context.Empty],
  ['while {fn()}', Context.OptionsRaw],
  ['while () {}', Context.OptionsRaw],
  ['while (test)', Context.Empty],
  ['`test${exp`', Context.Empty],
  ['`test${exp() exp}`', Context.Empty],
  [
    `async
    function test(){
        await foo();
    }`,
    Context.Empty
  ],
  [
    `function *test() {
      await foo();
    }`,
    Context.Empty
  ],
  [
    `class test {
      method(){
          await foo();
      }
    }`,
    Context.Empty
  ],
  [
    `var test = => {
      await test();
    }`,
    Context.Empty
  ],
  ['(a,b,,) => {};', Context.Empty],
  ['for await (a of b) {}', Context.Empty],
  [
    `async function test() {
      for await (a in b) {}
    }`,
    Context.Empty
  ],
  [
    `async function test() {
      for await (;;) {}
    }`,
    Context.Empty
  ],
  ['var {...rest, ...rest2} = a;', Context.Empty],
  ['var {...rest, a} = b;', Context.Empty],
  ['var a = 1._', Context.OptionsRaw],
  ['var a = 1.1e', Context.OptionsRaw],
  ['var a = 1.1e-', Context.OptionsRaw],
  ['var a = ._', Context.OptionsRaw],
  ['var a = 0._', Context.Empty],
  ['100000000000000000000000000000000N', Context.Empty],
  ['100000000000000000000000000000000e12n', Context.Empty],
  ['import(', Context.Empty],
  ['import()', Context.Empty],
  ['`test${', Context.Empty],
  ['`test${}test`', Context.Empty],
  ['var a = 0b12', Context.Empty],
  ['var a = 0b', Context.Empty],
  ['var a = 0b0112___', Context.Empty],
  ['var a = 0b0_112__', Context.Empty],
  ['var a = 0b1.2', Context.OptionsRaw],
  ['var a = 0b12__1', Context.OptionsRaw],
  ['var a = 0b1e2', Context.OptionsRaw],
  ['var a = 12.12.12', Context.Empty],
  ['var a = 12.12.12', Context.Strict | Context.Module],
  ['var a = 12e23.23e2', Context.Empty],
  ['var a = 23e23e23', Context.Empty],
  ['var a = 12e', Context.Empty],
  ['var a = 12e1a', Context.Empty],
  ['var a = 0xFH', Context.Empty],
  ['var a = 0x345aef3_', Context.Empty],
  ['var a = 0x345aef3_', Context.Strict | Context.Module],
  ['var a = 0x345___aef3_', Context.Empty],
  ['var a = 0x345aef3n_', Context.Empty],
  ['var a = 035424n', Context.Empty],
  ['var a = 035424_', Context.Empty],
  ['var a = 03_54_24', Context.Empty],
  ['var a = 0x', Context.Empty],
  ['var a = 0o456_', Context.Empty],
  ['var a = 0o77e23', Context.Empty],
  ['var a = 0o77_____e23', Context.Empty],
  ['var a = 0o77e23n', Context.Empty],
  ['var a = 0o', Context.Empty],
  ['1.1e', Context.Empty],
  ['1.1e_', Context.Empty],
  ['1.1_', Context.Empty],
  ['1._112e', Context.Empty],
  ['"test', Context.Empty],
  [
    `"test
    test"`,
    Context.Empty
  ],
  ['#\\u0021\n', Context.Empty],
  ['#\\u{21}\n', Context.Empty],
  ['#\\x21\n', Context.Empty],
  ['#\\041\n', Context.Empty],
  ['\n#!---IGNORED---\n', Context.Empty],
  [' #!---IGNORED---\n', Context.Empty],
  ['/\\S/gg', Context.Empty],
  ['/\\S/ii', Context.Empty],
  ['/\\S/ss', Context.Empty],
  ['/\\S/uu', Context.Empty],
  ['/\\S/yy', Context.Empty],
  ['/\\S/mm', Context.Empty],
  ['/\\S/12gg', Context.Empty],
  ['/\\S/123', Context.Empty],
  ['/\\S/123', Context.Strict | Context.Module],
  ['for (let let;;;) {}', Context.Empty],
  ['(10) => 0', Context.Empty],
  ['\\u12', Context.Empty],
  ['class a {b(enum){}}', Context.Empty],
  ['class ', Context.Empty],
  ['313e-n', Context.Empty],
  ['313e-2n', Context.Empty],
  ['034e1', Context.Empty],
  ['034E1', Context.Empty],
  ['1_0_0_0_', Context.Empty],
  ['0x1_', Context.Empty],
  ['1e+_1', Context.Empty],
  ['1__0', Context.Empty],
  ['0o7__77', Context.Empty],
  ['0o_777', Context.Empty],
  ['0_.01', Context.Empty],
  ['0_b_1', Context.Empty],
  ['0_x1', Context.Empty],
  ['0x1__1', Context.Empty],
  ['0x1_', Context.Empty],
  ['0.0_2_1_', Context.Empty],
  ['00_122', Context.Empty],
  ['0_012', Context.Empty],
  ['07_7_7', Context.Empty],
  ['07__77', Context.Empty],
  ['\\u{10_FFFF}', Context.Empty],
  ['0.0__21', Context.Empty],
  ['function * gen() { (yield *)  }', Context.Empty],
  ['function * gen() { yield / yield }', Context.Empty],
  ['function * gen() { yield /* comment */\n {yield: 42} }', Context.Empty],
  ['function * gen() { var {foo: yield} = {a: 42}; }', Context.Empty],
  ['function * gen() { ({a: yield} = {a: 42}); }', Context.Empty],
  ['function * gen() { ({a: yield 24} = {a: 42});  }', Context.Empty],
  ['function * gen() { for (yield "x" of {});  }', Context.Empty],
  ['function * gen() { class C extends yield { } }', Context.Empty],
  ['function * gen() { var [yield] = [42]; }', Context.Empty],
  ['function * gen() { + yield 3 }', Context.Empty],
  ['function * gen() { yield 3 + yield 4;  }', Context.Empty],
  ['/\\S', Context.Empty],
  ['try {} finally alert();', Context.Empty],
  ['throw', Context.Empty],
  ['try console.log();', Context.Empty],
  ['if', Context.Empty],
  ['if (test) {} else', Context.Empty],
  ['if (test) else{}', Context.Empty],
  ['if (test) {} else{} else{}', Context.Empty],
  ['for (let a, b in c);', Context.Empty],
  ['for', Context.Empty],
  ['for (i in){}', Context.Empty],
  ['for (;; {', Context.Empty],
  ['for (i of){}', Context.Empty],
  ['for (i of s {}', Context.Empty],
  ['var arr = [a b', Context.Empty],
  ['0xabcinstanceof x', Context.Empty],
  ['3in x', Context.Empty],
  ['01234567in y', Context.Empty],
  ['02in y', Context.Empty],
  ['08in y', Context.Empty],
  ['0B0in y', Context.Empty],
  ['0O034in y', Context.Empty],
  ['0Xin y', Context.Empty],
  ['0Xain y', Context.Empty],
  ['0bin y', Context.Empty],
  ['0oin y', Context.Empty],
  ['0o465in y', Context.Empty],
  ['0xFin y', Context.Empty],
  ['134in y', Context.Empty],
  ['.24-e7in y', Context.Empty],
  ['.24ein y', Context.Empty],
  ['0Binstanceof x', Context.Empty],
  ['0O034instanceof x', Context.Empty],
  ['0o465instanceof x', Context.Empty],
  ['3instanceof x', Context.Empty],
  ['.24einstanceof x', Context.Empty],
  ['{0O}', Context.Empty],
  ['23.e in x', Context.Empty],
  ['with (a) let [x] = y', Context.Empty],
  ['async let [] = y', Context.Empty],
  ['for (a in b) let x', Context.Empty],
  ['with (a) let [x] = y', Context.Empty],
  ['with (a) let [] = y', Context.Empty],
  ['async let []', Context.Empty],
  ['async let [] = y', Context.Empty],
  ['async let {}', Context.Empty],
  ['{ let [] }', Context.Empty],
  ['() => { let {} }', Context.Empty],
  ['switch (a) { case b: let [x] }', Context.Empty],
  ['switch (a) { case b: let {} }', Context.Empty],
  ['switch (a) { case b: let {x} }', Context.Empty],
  [
    `do let [x]
    [while (a);`,
    Context.Empty
  ],
  [
    `do let [x] = y
    while (a);`,
    Context.Empty
  ],
  [
    `do let {}
    while (a);`,
    Context.Empty
  ],
  [
    `do let {} = y
    while (a);`,
    Context.Empty
  ],
  [
    `do let {x}
    while (a);`,
    Context.Empty
  ],
  ['do let [] = y while (a);', Context.Empty],
  ['do let [x] while (a);', Context.Empty],
  ['do let {} while (a);', Context.Empty],
  ['do let {x} = y while (a);', Context.Empty],
  ['do let [] = y; while (a);', Context.Empty],
  ['do let {}; while (a)', Context.Empty],
  ['() => let x', Context.Empty],
  ['(async)(a) => {}', Context.Empty],
  ['let async function() { } = { };', Context.Empty],
  ['if ( true, ) {}', Context.Empty],
  ['async (package) => {"use strict";}', Context.Empty],
  ['async (break) => {"use strict";}', Context.Empty],
  ['async (break) => {}', Context.Empty],
  ['for (let a = b in c; ;);', Context.Empty],
  ['[ ] [ [ ] >[ ]< [ ] ] [ ]', Context.Empty],
  ['(foo, break) => {}', Context.Empty],
  ['function a(){ "use strict"; function a(a=yield){}}', Context.Empty],
  ['class A {set a(yield){}}', Context.Empty],
  ['[ a -= 12 ] = 12;', Context.Empty],
  ['(...a)', Context.Empty],
  ['(a, ...b)', Context.Empty],
  ['(((...a)))', Context.Empty],
  ['0++', Context.Empty],
  ['0--', Context.Empty],
  ['let let;', Context.Empty],
  ['({a: 0} = 0);', Context.Empty],
  ['({get a(){}} = 0)', Context.Empty],
  ['({a}) = 0;', Context.Empty],
  ['({a: 0} = 0);', Context.Empty],
  ['({a} += 0);', Context.Empty],
  ['[...{a: 0}] = 0;', Context.Empty],
  ['({a: 0} = 0);', Context.Empty],
  ['for({a: 0} of 0);', Context.Empty],
  ['\\u0000', Context.Empty],
  ['for(const let = 0;;);', Context.Empty],
  ['class A extends B { constructor() { !{constructor() { super(); }}; } }', Context.Empty],
  ['();', Context.Empty],
  ['[(a = 1)] = t;', Context.Empty],
  ['[([b])] = t;', Context.Empty],
  ['[([a])] = 12;', Context.Empty],
  ['(a, ...b);', Context.Empty],
  ['var e = [a -= 12] = 5', Context.Empty],
  ['function f(x=(yield z)=y){}', Context.Empty],
  [`for (a+b in c) d;`, Context.Empty],
  [`for (a+b of c) d;`, Context.Empty],
  ['for ({x = y} ;;) {}', Context.Empty],
  ['for ({x = y} ;1 ;) {}', Context.Empty],
  ['for ({x = y} ;1 ;1) {}', Context.Empty],
  [`for ({a=b};;);`, Context.Empty],
  [`for (a,b of c) d;`, Context.Empty],
  [`for (a, b of c);`, Context.Empty],
  [`for (a,b of c) d;`, Context.Empty],
  ['(y, x)++', Context.Empty],
  ['(true ? x : y)++', Context.Empty],
  ['function f() { (1--).x }', Context.Empty],
  ['(a:) --b', Context.Empty],
  ['function f() { ++ -- ++ a }', Context.Empty],
  ['function f() { ++ new new a ++ }', Context.Empty],
  ['"use strict"; (package) => {}', Context.Empty],
  ['"use strict"; async (package) => {}', Context.Empty],
  ['async (package) => { "use strict"; }', Context.Empty],
  [
    `do x
    while ({ [y = [yy]]: { x = (y)} ? null : false  })`,
    Context.Empty
  ],
  ['"use strict"; for (let in x);', Context.Empty],
  [`function* f(){ yield↵/foo }`, Context.Empty],
  [`wrap({get 123: x});`, Context.Empty],
  ['for (let {x}.y of x);', Context.Empty],
  ['for (let {x}.y in x);', Context.Empty],
  ['for (let[a+b] in x);', Context.Empty],
  [`function *g() { async yield => {}; }`, Context.Empty],
  [`function *g() { async yield = {}; }`, Context.Empty],
  ['let [o.x=1]=[]', Context.Empty],
  ['var [((((a)))), b] = [];', Context.Empty],
  [' var [(a)] = 0', Context.Empty],
  ['const [(x)] = []', Context.Empty],
  ['let [(x().foo)] = x', Context.Empty],
  ['let [(x) = y] = [];', Context.Empty],
  ['let [(x)] = [];', Context.Empty],
  ['[new ++([])', Context.Empty],
  ['this.foo[foo].bar(this)(bar)[foo]()--', Context.Empty],
  ['((x,x)) = 5', Context.Empty],
  ['(((x,x))) = 5', Context.Empty],
  ['async ({a = b})', Context.Empty],
  ['new Date++;', Context.Empty],
  ['++++x', Context.Empty],
  ['for(let.a of 0);', Context.Empty],
  ['({...{b = 0}.x} = {});', Context.Empty],
  ['[[(x, y)]] = x;', Context.Empty],
  ['[...[(x, y)]] = x;', Context.Empty],
  ['({a: {b = 0}.x} = {});', Context.Empty],
  ['[[(x, y)]] = x;', Context.Empty],
  ['[...[(x, y)]] = x;', Context.Empty],
  ['(async function*() { } = 1);', Context.Empty],
  ['([(x().foo)]) => x', Context.Empty],
  ['({a: {b = 0}.x} = {});', Context.Empty],
  ['[...{a = 0}.x] = [];', Context.Empty],
  ['[...(a,b)] = [],', Context.Empty],
  ['[...{ a }] = b,', Context.Empty],
  ['for (+i in {});', Context.Empty],
  ['for({} = 0 of {});', Context.Empty],
  ['for({p: x} = 0 of {});', Context.Empty],
  ['for({p: x = 0} = 0 of {});', Context.Empty],
  ['for({x} = 0 of {});', Context.Empty],
  ['for({x = 0} = 0 of {});', Context.Empty],
  ['async function f() { for await ({0: a = 1} = 1 of []) ; }', Context.Empty],
  ['async function * f() { for await({a: a = 1} = 1 of []){ } }', Context.Empty],
  ['async function * f() { for await({a} = 1 of []){ } }', Context.Empty],
  ['async function f() { for await ([a] = 1 of []) ; }', Context.Empty],
  ['async function f() { for await ({[Symbol.iterator]: a = 1} = 1 of []) ; }', Context.Empty],
  ['for ((a?b:c) in y)z;', Context.Empty],
  ['for ((a,b) in c);', Context.Empty],
  ['for (((a,b)) in c);', Context.Empty],
  ['for ({}.x);', Context.Empty],
  ['for ([...[a]] = 0 in {});', Context.Empty],
  ['true:oops;', Context.Empty],
  ['for(let.a of 0);', Context.Empty],
  ['for (let {i} = 20 in b) { }', Context.Empty],
  ['for (a, b in c) break', Context.Empty],
  ['for (const let = 10; ; ) { break; }', Context.Empty],
  ['for (const let in {}) { break; }', Context.Empty],
  ['for (const let of []) { break; }', Context.Empty],
  ['for (let let = 10; ; ) { break; }', Context.Empty],
  ['for (let let in {}) { break; }', Context.Empty],
  ['for (let let of []) { break; }', Context.Empty],
  ['for ( %a ; ; ) { }', Context.Empty],
  ['for () { }', Context.Empty],
  ['for ( a ) { }', Context.Empty],
  ['for ( ; ) ;', Context.Empty],
  ['for a ; b ; c { }', Context.Empty],
  ['for (a ; { }', Context.Empty],
  ['for ( a ; ) ;', Context.Empty],
  ['for ( ; a ) break', Context.Empty],
  ['var', Context.Empty],
  ['var = 7', Context.Empty],
  ['var c (6)', Context.Empty],
  ['if (a) var a,b; else { const b, c }', Context.Empty],
  ['var 5 = 6', Context.Empty],
  ['var a = if (b) { c }', Context.Empty],
  ['var a = var b', Context.Empty],
  ['const a = b += c, a, a, a = (b - f())', Context.Empty],
  ['var a %= b | 5', Context.Empty],
  ['var (a) = 5', Context.Empty],
  ['var a = (4, b = 6', Context.Empty],
  ['const "l" = 3', Context.Empty],
  ['var var = 3', Context.Empty],
  ['const a, a, a = void 7 - typeof 8, a = 8', Context.Empty],
  ['var a = ?', Context.Empty],
  ['const a = *7', Context.Empty],
  ['var a = :)', Context.Empty],
  ['var a = b ? c, b', Context.Empty],
  ['const a = b : c', Context.Empty],
  [`({x} = await bar) => {}`, Context.Empty],
  [`async ({x} = await bar) => {}`, Context.Empty],
  [`let z = async ({x} = await bar) => {}`, Context.Empty],
  [`async ({x} = await bar);`, Context.Empty],
  ['function foo(a, ...b, c) { }', Context.Empty],
  ['function foo(a, ...b, ) { }', Context.Empty],
  ['function foo(a, ...[b], ) { }', Context.Empty],
  ['function foo(a, ...{b}, ) { }', Context.Empty],
  ['function foo(...a, ...b) { }', Context.Empty],
  ['function foo(a, ...{b} = 20) { }', Context.Empty],
  ['function foo(a, ...b = 20) { }', Context.Empty],
  ['function * foo(o) { ({...{ x = yield }} = o); }', Context.Empty],
  ['var {...r = {a: 2}} = {a: 1, b: 2};', Context.Empty],
  ['var {...r, b} = {a: 1, b: 2};', Context.Empty],
  ['var {...r, ...e} = {a: 1, b: 2};', Context.Empty],
  ['({...new Object()} = {a: 1, b: 2});', Context.Empty],
  ['(function * (o) { ({ ...{ x: yield } } = o); })()', Context.Empty],
  ['var [...x = 20] = 20;', Context.Empty],
  ['var [...[...x = 20]] = 20;', Context.Empty],
  ['var {x}', Context.Empty],
  ['var {x, y}', Context.Empty],
  ['var {x} = 20, {x, y}', Context.Empty],
  ['var {foo:bar, bar:baz}', Context.Empty],
  ['var [x]', Context.Empty],
  ['var [x, y]', Context.Empty],
  ['var [x] = [], [x, y]', Context.Empty],
  ['for (of of of of){}', Context.Empty],
  ['for (of of; of; of){}', Context.Empty],
  ['for (of of []; of; of){}', Context.Empty],
  ['for (of of){}', Context.Empty],
  ['for (var of of){}', Context.Empty],
  ['for (of of in of){}', Context.Empty],
  ['for (of in){}', Context.Empty],
  ['for (var of in){}', Context.Empty],
  ['for (var of.of of of){}', Context.Empty],
  ['for (var of[of] of of){}', Context.Empty],
  ['do function foo() { } while (false); ', Context.Empty],
  [`async ({} + 1) => x;`, Context.Empty],
  ['({a=b}.x) => x', Context.Empty],
  ['({a=b}[x]) => x', Context.Empty],
  ['({a=b}(x)) => x', Context.Empty],
  ['([{a=b}].x) => x', Context.Empty],
  ['([{a=b}][x]) => x', Context.Empty],
  ['([{a=b}](x)) => x', Context.Empty],
  ['for (let() of y);', Context.Empty],
  ['var [(x)] = v;', Context.Empty],
  ['var {(x)} = v;', Context.Empty],
  ['const [(x)] = v;', Context.Empty],
  ['const {(x)} = v;', Context.Empty],
  [`(a,b,)`, Context.Empty],
  ['x = {x=y}', Context.Empty],
  [`(...x);`, Context.Empty],
  [`(a,b,)`, Context.Empty],
  [`([{a=b}.x]) => x`, Context.Empty],
  [`({a: {a=b}.x}) => x`, Context.Empty],
  [`[...[x].map(y, z)] = a;`, Context.Empty],
  [`({ident: {x}.join("")}) => x`, Context.Empty],
  [`({"x": [y].slice(0)} = x)`, Context.Empty],
  [`({"x": [y].slice(0)}) => x`, Context.Empty],
  ['let z = async ({x} = await bar) => {}', Context.Empty],
  ['async function f(){    async function g(x=(await z)=y){}   }', Context.Empty],
  ['(x=(await z)=y)', Context.Empty],
  ['(x=(yield z)=y)', Context.Empty],
  ['function *f(x=(yield)=y){}', Context.Empty],
  ['function *f(x=(yield z)=y){}', Context.Empty],
  [`(a,)`, Context.Empty],
  [`(a = b,)`, Context.Empty],
  ['(a', Context.Empty],
  ['a[5', Context.Empty],
  ['a[5 + 6', Context.Empty],
  ['a.', Context.Empty],
  ['()', Context.Empty],
  ["a.'l'", Context.Empty],
  ['new -a', Context.Empty],
  ['(a:) --b', Context.Empty],
  ['a-- ++', Context.Empty],
  ['1: null', Context.Empty],
  ['+-!~', Context.Empty],
  ['+-!~((', Context.Empty],
  ['a)', Context.Empty],
  ['a]', Context.Empty],
  ['.l', Context.Empty],
  ['1.l', Context.Empty],
  ['a + * b', Context.Empty],
  ['a ? b', Context.Empty],
  ['a ? b :', Context.Empty],
  ['%a', Context.Empty],
  ['a in instanceof b.l', Context.Empty],
  ['- false = 3', Context.Empty],
  ['a + typeof b += c in d', Context.Empty],
  ['typeof a &= typeof b', Context.Empty],
  ['a(*a)', Context.Empty],
  ['a(.length)', Context.Empty],
  ['new a(5', Context.Empty],
  ['(function a{})', Context.Empty],
  ['try a; catch(e) {}', Context.Empty],
  ['try {} catch(e) a()', Context.Empty],
  ['try {} finally a()', Context.Empty],
  ['try {} catch(e)', Context.Empty],
  ['try {} finally', Context.Empty],
  ['try {} finally {} catch(e) {}', Context.Empty],
  ['try {} catch (...) {}', Context.Empty],
  ['switch () {}', Context.Empty],
  ['case 5:', Context.Empty],
  ['default:', Context.Empty],
  ['switch (a) b;', Context.Empty],
  ['switch (a) case 3: b;', Context.Empty],
  ['switch (g) { case 1: a: }', Context.Empty],
  ['switch (g) { case 1: a: default: }', Context.Empty],
  ['switch g { case 1: l() }', Context.Empty],
  ['switch (g) { case 1:', Context.Empty],
  ['switch (4 - ) { }', Context.Empty],
  ['switch (l) { default case: 5; }', Context.Empty],
  ["for(var a,b 'this shouldn't be allowed' false ; ) ;", Context.Empty],
  ["for(var a,b '", Context.Empty],
  ['function a() { return 1, }', Context.Empty],
  ['test !== false ? success() :', Context.Empty],
  ['test !== false ? success()', Context.Empty],
  ['test !== false ?', Context.Empty],
  ['((a()', Context.Empty],
  ['(++)', Context.Empty],
  ['++()', Context.Empty],
  ['for (new new new a in b) break', Context.Empty],
  ['for (var a = 7, b = c < d >= d ; f()[6]++ ; --i()[1]++ ) {}', Context.Empty],
  ['if (--a()) do with(1) try {} catch(ke) { f() ; g() } while (a in b) else {}', Context.Empty],
  ['if (0) new a(b+c) = 5', Context.Empty],
  ['const a = b += c, a, a, a = (b - f())', Context.Empty],
  ['const a = 5, b, c', Context.Empty],
  ['s: l: a[2](4 == 6, 5 = 6)(f[4], 6)', Context.Empty],
  ['a: ((typeof (a))) >>>= a || b.l && c', Context.Empty],
  ['++a--', Context.Empty],
  ['++((a))--', Context.Empty],
  ['(a.x++)++', Context.Empty],
  ['a: b: c: new f(x++)++', Context.Empty],
  ['(1--).x', Context.Empty],
  ['function f() { a. }', Context.Empty],
  ['function f() { () }', Context.Empty],
  ["a.'l'", Context.Empty],
  ['++ -- ++ a', Context.Empty],
  ['function f() { ++ -- ++ a }', Context.Empty],
  ['function f() { ++a-- }', Context.Empty],
  ['1.l', Context.Empty],
  ['function f() { a(b.) }', Context.Empty],
  ['for (var a = 5 += 6 in b) break', Context.Empty],
  ['function f() { if (0) new a(b+c) = 5 }', Context.Empty],
  ['function f() { if (0) obj.foo\\su03bb;  }', Context.Empty],
  ['function f() { if (--a()) do with(1) try {} catch(ke) { f() ; g() } while (a in b) else {} }', Context.Empty],
  ['if (--a()) do with(1) try {} catch(ke) { f() ; g() } while (a in b) else {}', Context.Empty],
  ['function f() { for (var a = 7, b = c < d >= d ; f()[6]++ ; --i()[1]++ ) {} }', Context.Empty],
  ['for (delete new a() in b) break', Context.Empty],
  ['for (a * a in b) break', Context.Empty],
  ['for ((a * a) in b) break', Context.Empty],
  ['for (a++ in b) break', Context.Empty],
  ['for ((a++) in b) break', Context.Empty],
  ['for (++a in b) break', Context.Empty],
  ['for ((++a) in b) break', Context.Empty],
  ['for (a, b in c) break', Context.Empty],
  ['for (var a = 5 += 6 in b) break', Context.Empty],
  ['for ((++a) in b) break', Context.Empty],
  ['for (a, b in c) break', Context.Empty],
  ['for (new a in b in c in d) break', Context.Empty],
  ['function f() { for (new a in b in c in d) break }', Context.Empty],
  ['for (new new new a in b) break', Context.Empty],
  ['function f() { for (new new new a in b) break }', Context.Empty],
  ['for (delete new a() in b) break', Context.Empty],
  ['for (var a = (b in c in d) break', Context.Empty],
  ['function f() { for (var a = (b in c in d) break }', Context.Empty],
  ['function f() { for (var (a) in b) { } }', Context.Empty],
  ['try {}', Context.Empty],
  ['function f() { try {} }', Context.Empty],
  ['catch(e) {}', Context.Empty],
  ['finally {}', Context.Empty],
  ['function f() { try {} catch(e) }', Context.Empty],
  ['try {} catch (...) {}', Context.Empty],
  ['if (--a()) do with(1) try {} catch(ke) { f() ; g() } while (a in b) else {}', Context.Empty],
  ['function f() { if (--a()) do with(1) try {} catch(ke) { f() ; g() } while (a in b) else {} }', Context.Empty],
  ['switch (true) { default: case 6: default: }', Context.Empty],
  ['switch (l) { case b ? c : }', Context.Empty],
  ['switch (4 - ) { }', Context.Empty],
  ['function f() { switch (4 - ) { } }', Context.Empty],
  ['switch (l) { default case: 5; }', Context.Empty],
  ["for(var a,b 'this shouldn't be allowed' false ; ) ;", Context.Empty],
  ['var a.b = c', Context.Empty],
  ['function f() { var a.b = c }', Context.Empty],
  ['function f() { var var = 3 }', Context.Empty],
  ['var a = (4, b = 6', Context.Empty],
  ['var a %= b | 5', Context.Empty],
  ['var a = if (b) { c }', Context.Empty],
  ['var', Context.Empty],
  ['continue a++', Context.Empty],
  ['if (a()) function f() { else function g() }', Context.Empty],
  ['function f() { if (a()) function f() { else function g() } }', Context.Empty],
  ['do if (a) while (false) else debugger', Context.Empty],
  ['while if (a) ;', Context.Empty],
  ['function f() { debugger X }', Context.Empty],
  ['function f() { break 0.2 }', Context.Empty],
  ['function f() { continue a++ }', Context.Empty],
  ['((...a = []) => {})', Context.Empty],
  ['(async (...a = []) => {})', Context.Empty],
  ['[]=>0', Context.Empty],
  ['\\ua', Context.Empty],
  ['for(let [let];;);', Context.Empty],
  ['`${a}a${b}', Context.Empty],
  ['0b12', Context.Empty],
  ['function *g(){ (a, b, c, yield) => 42 }', Context.Empty],
  ['(function *(yield){})', Context.Empty],
  ['({set a({e: a.b}){}})', Context.Empty],
  ['[0,{a=0}] = 0', Context.Empty],
  ['"\\', Context.OptionsDisableWebCompat],
  ['export *', Context.Empty],
  ['function a() { new.\\u0074arget; }', Context.Empty],
  ['for ((i in {}));', Context.Empty],
  ['(function ({e: a.b}) {})', Context.Empty],
  ['function a({e: a.b}) {}', Context.Strict | Context.Module],
  ['for(let x=1 of [1,2,3]) 0', Context.Empty],
  ['import foo from bar', Context.Empty],
  ['function* f() { [yield* {a = 0}]; }', Context.Empty],
  ['{ ;  ;  ', Context.Empty],
  ['"\\u";', Context.Empty],
  ['({ get prop(x) {} })', Context.Empty],
  ['＊', Context.Empty],
  ['function f() { (super)() }', Context.Empty],
  ['function *g() { function *yield(){} }', Context.Empty],
  ['1: a', Context.Empty],
  ['do { x } *', Context.Empty],
  ['f(..g);', Context.Empty],
  ['�', Context.Empty],
  ['var {a:a};', Context.Empty],
  ['({var} = 0)', Context.Empty],
  ['[...0,...{a=0}]=0', Context.Empty],
  ['var (x)', Context.Empty],
  ['class A { set prop() {} }', Context.Empty],
  ['f(....a)', Context.Empty],
  ['a enum', Context.Empty],
  ['0.toString', Context.Empty],
  ['(1, x)=0;', Context.Empty],
  ['"foo" | "bar" = ("foo");', Context.Empty],
  ['"foo" = (myRandBool ? "foo" : ("foo"));', Context.Empty],
  ['(...a, ...b) => {}', Context.Empty],
  ['(a, ...b,) => {}', Context.Empty],
  ['class E1 { 0123.1() {} }', Context.Empty],
  //'class E0 { 0123() {} }',
  ['class E extends { }', Context.Empty],
  ['class E2 { static set prototype(x) {} }', Context.Empty],
  ['class A extends 0 ', Context.Empty],
  ['class A extends "test"', Context.Empty],
  ['class A extends {}', Context.Empty],
  ['class A extends undefined ', Context.Empty],
  ['for (({x}) of [{x:1}]) {}', Context.Empty],
  ['(o.f=1)=>0', Context.Empty],
  ['({...(obj)}) => {}', Context.Empty | Context.Strict | Context.Module],
  ['({...(a,b)} = foo)', Context.Empty | Context.Strict | Context.Module],
  ['({...})', Context.Empty],
  ['({...obj1,a} = foo)', Context.Empty],
  ['let {...[a,b]} = foo', Context.Empty],
  ['let {...(a,b)} = foo', Context.Empty],
  ['({...[a,b]}) => {}', Context.Empty],
  ['let {...obj1,} = foo', Context.Empty],
  ['({}) = 1', Context.Empty],
  ['({...obj1,...obj2} = foo)', Context.Empty],
  ['(async (...a, b) => {})', Context.Empty],
  ['(async (...a, ...b) => {})', Context.Empty],
  ['(async (...x = []) => {});', Context.Empty],
  ['if (a()) while(0) function f() {} else function g() {}', Context.Empty],
  ['if (a()) function f() { else function g() }', Context.Empty],
  ['if (a) if (b) ; else function f {}', Context.Empty],
  ['if (a) if (b) ; else function (){}', Context.Empty],
  ['var 5 = 6', Context.Empty],
  ['var a = if (b) { c }', Context.Empty],
  ['var a %= b | 5', Context.Empty],
  ['for ( ; a ) break', Context.Empty],
  ['for (a ; { }', Context.Empty],
  ['for () { }', Context.Empty],
  ['for ( ; var a ; ) break', Context.Empty],
  ['for (const a; ; ) break', Context.Empty],
  ['for ( %a ; ; ) { }', Context.Empty],
  ['[]=>0', Context.Empty],
  ['(a = 0, ...b = []) => {}', Context.Empty],
  ['({a = 0})', Context.Empty],
  ['let b = []; for await(a in b);', Context.Empty],
  ['for(const a = 0 in b);', Context.Empty],
  ['function true() { }', Context.Empty],
  ['for (var {x} = y of z);', Context.Empty],
  ['function f() { new..target; }', Context.Empty],
  ['(function() { yield 3; })', Context.Empty],
  ['"use strict"; for (let [a = let];;) {}', Context.Empty],
  ['const const;', Context.Empty],
  ['let b = []; for await(a in b);', Context.Empty],
  ['for await(;;);', Context.Empty],
  ['(...a, b) => {}', Context.Empty],
  ['continue (my_friend)', Context.Empty],
  ['do g; while ((4)', Context.Empty],
  ['do g; while 4', Context.Empty],
  ['function f() { with a.b { } }', Context.Empty],
  ['new -a', Context.Empty],
  ['function f() { new -a }', Context.Empty],
  ['a: b: c: new f(x++)++', Context.Empty],
  ['function f() { a-- ++ }', Context.Empty],
  ['(a:) --b', Context.Empty],
  ['++ -- ++ a', Context.Empty],
  ['(a++', Context.Empty],
  ['with a.b { }', Context.Empty],
  ['if (a) { else }', Context.Empty],
  ['if (a) {} else x; else', Context.Empty],
  ['delete the void', Context.Empty],
  ['function f() { (a++ }', Context.Empty],
  ['.l', Context.Empty],
  ['function f() { .l }', Context.Empty],
  ['with(true) let a', Context.Empty],
  ['for (; false; ) let {}', Context.Empty],
  ['for(let a of b, c);', Context.Empty],
  ['for(var a = 0 of b);', Context.Empty],
  ['a: let a', Context.Empty],
  ['a + * b', Context.Empty],
  ['1: null', Context.Empty],
  ['function f() { (a.x++)++ }', Context.Empty],
  ['(a.x++)++', Context.Empty],
  ['function f() { a + * b }', Context.Empty],
  ['a ? b :', Context.Empty],
  ['function f() { a- }', Context.Empty],
  ['a in instanceof b.l', Context.Empty],
  ['function f() { a in instanceof b.l }', Context.Empty],
  ['typeof a &= typeof b', Context.Empty],
  ['function f() { typeof a &= typeof b }', Context.Empty],
  ['function f() { a: ((typeof (a))) >>>= a || b.l && c }', Context.Empty],
  ['a(5,6', Context.Empty],
  ['new a(5', Context.Empty],
  ['function f() { function f(a b) {} }', Context.Empty],
  ['function f(a b) {}', Context.Empty],
  ['[,', Context.Empty],
  ['function f() { [, }', Context.Empty],
  ['function f() { 1 + {a }', Context.Empty],
  ['1 + {get l(', Context.Empty],
  ['function f() { 1 + {get l( }', Context.Empty],
  ['a ? b, c : d', Context.Empty],
  ['{ if (a) }', Context.Empty],
  ['if a {}', Context.Empty],
  ['if (a', Context.Empty],
  ['function f() { else {} }', Context.Empty],
  [`while 1 break;`, Context.Empty],
  [`while true break;`, Context.Empty],
  [`var x += 1;`, Context.Empty],
  ['foo--.toString();', Context.Empty],
  ['foo++.toString();', Context.Empty],
  ['while(true)break 5+5;', Context.Empty],
  ['while(true)continue 5+5;', Context.Empty],
  ['({ "x" = true } = y);', Context.Empty],
  [`\\`, Context.Empty],
  [`\\x`, Context.Empty],
  [`\\o`, Context.Empty],
  [`\\u1`, Context.Empty],
  [`\\u12`, Context.Empty],
  [`a\\uz`, Context.Empty],
  [`a\\o`, Context.Empty],
  [',', Context.Empty],
  [',,', Context.Empty],
  [',,,', Context.Empty],
  ['var {(a)} = 0', Context.Empty],
  ['var {a:(b)} = 0', Context.Empty],
  ['({(a)} = 0)', Context.Empty],
  ['({a:(b = 0)} = 1)', Context.Empty],
  ['(new.target) = 1', Context.Empty],
  ['([a += a] = a)', Context.Empty],
  ['for (`a` of b);', Context.Empty],
  ['(`a`) => b;', Context.Empty],
  ['{_ => {}/123/g;}', Context.Empty],
  ['({a}) = 1;', Context.Empty],
  ['(var {a:b} = {})', Context.Empty],
  ['({start, stop}) = othernode;', Context.Empty],
  ['{a, b} = {a: 1, b: 2}', Context.Empty],
  ['({a, b}) = {a: 1, b:2};', Context.Empty],
  ['({b}) = b;', Context.Empty],
  ['([b]) = b;', Context.Empty],
  ['({a}) = 2;', Context.Empty],
  ['([b]) = b;', Context.Empty],
  ['[(a = 0)] = 1', Context.Empty],
  ['(,);', Context.Empty],
  ['(a,);', Context.Empty],
  ['(a,b,c,);', Context.Empty],
  ['n, op, val,', Context.Empty],
  ['foo(a,,) => 0', Context.Empty],
  ['async (a,,) => 0', Context.Empty],
  ['foo (,) => 0', Context.Empty],
  [', => 0', Context.Empty],
  [', () => 0', Context.Empty],
  ['async (,) => 0', Context.Empty],
  ['function foo(...a,) { }', Context.Empty],
  ['(function(...a,) { })', Context.Empty],
  ['(...a,) => a', Context.Empty],
  ['async (...a,) => a', Context.Empty],
  // Esprima issue>  https://github.com/jquery/esprima/issues/1719
  [`if (false) L: async function l() {}`, Context.Empty],
  ['({ src: ([dest]) } = obj)', Context.Empty],
  ['[a, ...(b = c)] = 0', Context.Empty],
  ['[v] += ary', Context.Empty],
  ['function *g(x = yield){}', Context.Empty],
  ['throw', Context.Empty],
  ['if(false)', Context.Empty],
  ['async ((x, y, z)) => 0 ', Context.Empty],
  ['const {params:{callFrames:[{callFrameId}]}} = await Protocol.Debugger.oncePaused();', Context.Empty],
  ['‿ = 10', Context.Empty],
  ['if(true) let a = 1;', Context.Empty],
  ['/*', Context.Empty],
  ['/**', Context.Empty],
  ['/*\n\n\n', Context.Empty],
  ['\n]', Context.Empty],
  ['//\r\n]', Context.Empty],
  ['//\n\r]', Context.Empty],
  ['//\r \n]', Context.Empty],
  [
    `function foo() {
      'use strict';
      function f() {
        var o = {};
        with (o) {};
      }
    }`,
    Context.Empty
  ],
  [
    `function foo() {
      function f() {
        'use strict';
        var o = {};
        with (o) {};
      }
    }`,
    Context.Empty
  ],
  [
    `function f() {
      'use strict';
      var o = {};
      with (o) {};`,
    Context.Empty
  ],
  [`try{};catch{};finally{}`, Context.Empty],
  [`if{};else if{};else{}`, Context.Empty],
  [`do{};while()`, Context.Empty],
  [`({a({e: a.b}){}})`, Context.Empty],
  [`(function *(x, ...yield){})`, Context.Empty],
  [`async function *isiah(){ await yield x}`, Context.Empty],
  ['function hello() { \'use strict\'; ({ "\\1": 42 }); }', Context.Empty],
  ["function hello() { 'use strict'; 021; }", Context.Empty],
  ['function hello() { \'use strict\'; "\\000"; }', Context.Empty],
  ['function hello() { \'use strict\'; "\\00"; }', Context.Empty],
  ['function hello() { \'use strict\'; "\\1"; }', Context.Empty],
  ["function hello() { 'use strict'; ({ 021: 42 }); }", Context.Empty],
  ['function hello() { "use strict"; function inner() { "octal directive\\1"; } }', Context.Empty],
  ['({ a:{} }) = 3;', Context.Empty],
  ['for ({} + b of obj);', Context.Empty],
  ['for (2 + b of obj);', Context.Empty],
  ['for ("abc" + b of obj);', Context.Empty],
  ['for (/x/g + b of obj);', Context.Empty],
  ['for (a + b of obj);', Context.Empty],
  ['for (/x/g + b in obj);', Context.Empty],
  ['for ("abc" + b in obj);', Context.Empty],
  ['for (2 + b in obj);', Context.Empty],
  ['for ({} + b in obj);', Context.Empty],
  ['for ([] + b in obj);', Context.Empty],
  ['for (a + b in obj);', Context.Empty],
  ['for (eval instanceof this; new 2e308;)', Context.Empty],
  [`([...x.y]) => z`, Context.Empty],
  [`([...x.y] = z) => z`, Context.Empty],
  [`for (a);`, Context.Empty],
  ['(((x)))\n++;', Context.Empty],
  ['(((x)))\n--;', Context.Empty],
  ['[...a()] = []', Context.Empty],
  ['[...a=b] = []', Context.Empty],
  ['[a, ...b, c] = []', Context.Empty],
  ['[...a, ,] = []', Context.Empty],
  ['[...a++] = []', Context.Empty],
  ['[...(a,b)] = []', Context.Empty],
  ['[...!a] = []', Context.Empty],
  ['[...a+b] = []', Context.Empty],
  ['var [...a.x] = []', Context.OptionsRaw],
  ['var [...(b)] = []', Context.Empty],
  ['[...b,] = []', Context.Empty],
  ['switch (x) { something }', Context.Empty],
  ['function *f(){ return 5 + yield x; }', Context.Empty],
  ['(x=1)=2', Context.Empty],
  [`function *f(){ return function(x = yield y){}; }`, Context.OptionsRaw],
  ['yield (await foo)', Context.Empty],
  ['delete (foo)=>bar', Context.Empty],
  [`async function f(){ return await => {}; }`, Context.Empty],
  [`async () \n => x`, Context.Empty],
  [`(async () \n => x)`, Context.OptionsRaw],
  [`1.a`, Context.Empty],
  [`1.e+`, Context.Empty],
  [`08a`, Context.Empty],
  ["'use strict'; `\\00`;", Context.OptionsRaw | Context.Strict | Context.OptionsDirectives],
  [`0o1a`, Context.Empty],
  [`x \n isnt y`, Context.Empty],
  [`function default() {}`, Context.Empty],
  [`var default`, Context.Empty],
  [`for (let x = 42 in list) process(x);`, Context.Empty],
  [`for (let x = 42 of list) process(x);`, Context.OptionsRaw],
  [`'use strict'; let + 1`, Context.Empty],
  [`let let`, Context.Empty],
  [`'use strict'; let let`, Context.Empty],
  [`'use strict'; let let`, Context.Strict | Context.Module | Context.OptionsDirectives | Context.OptionsRaw],
  [`(([a, ...b = 0]) => {})`, Context.OptionsRaw],
  [`[a, ...b = 0] = []`, Context.OptionsRaw],
  [`[...a, b] = c`, Context.OptionsRaw],
  [`if (b,...a, );`, Context.OptionsRaw],
  [`switch (cond) { case 10: let a = 20; `, Context.OptionsRaw],
  [`obj = {x = 0}`, Context.OptionsRaw],
  [`f({x = 0})`, Context.OptionsRaw],
  [`(localVar |= defaultValue) => {}`, Context.OptionsRaw],
  [`if (1) let x = 10;`, Context.OptionsRaw],
  [`function* y({yield}) {}`, Context.OptionsRaw],
  [`let y = () => new.target`, Context.OptionsRaw],
  [`x = { method() 42 }`, Context.OptionsRaw],
  [`x = { get method() 42 }`, Context.OptionsRaw],
  [`x = { set method(val) v = val }`, Context.OptionsRaw],
  [`class A { set prop(x, y) {} }`, Context.OptionsRaw],
  ['( { get x() {} } = 0)', Context.OptionsRaw],
  ['x \n is y', Context.OptionsRaw],
  ['for (let x = 42 in list) process(x);', Context.OptionsRaw],
  ['let [this] = [10]', Context.OptionsRaw],
  ['let {this} = x', Context.OptionsRaw],
  ['let [function] = [10]', Context.OptionsRaw],
  [`\\u{FFFF`, Context.OptionsRaw],
  [`[a += b] = []`, Context.OptionsRaw],
  [`({async get foo() { }})`, Context.OptionsRaw],
  [`({async foo() { var await }})`, Context.OptionsRaw],
  [`class A {async get foo() { }}`, Context.OptionsRaw],
  [`class A {async foo() { return {await} }}`, Context.OptionsRaw],
  [`await a`, Context.OptionsRaw],
  [`async () => await`, Context.OptionsRaw],
  [`async function foo(a = await b) {}`, Context.OptionsRaw],
  [`([a.a]) => 42`, Context.OptionsRaw],
  ['(a) => {}()', Context.OptionsRaw],
  ['a => {}()', Context.OptionsRaw],
  ['x = { method() { super(); } }', Context.OptionsRaw],
  ['function *g() { (x = yield) => {} }', Context.OptionsRaw],
  ['(class { *static x() {} })', Context.OptionsRaw],
  ['(class A extends B { constructor() { function f() { super() } } })', Context.OptionsRaw],
  ['(class A extends B { method() { super() } })', Context.OptionsRaw],
  ['({[x]})', Context.OptionsRaw],
  ['for (let x = 42 in list) process(x);', Context.OptionsRaw],
  ['for (var [x] = 42 of list) process(x);', Context.OptionsRaw],
  ['(a, (b)) => 42', Context.OptionsRaw],
  ['((a)) => 42', Context.OptionsRaw],
  ['function foo(a, a = 2) {}', Context.OptionsRaw],
  ['(10) => 00', Context.OptionsRaw | Context.Strict | Context.Module],
  ['yield v', Context.OptionsRaw],
  ['let [function] = [10]', Context.OptionsRaw],
  ['([this] = [10])', Context.OptionsRaw],
  ["'use strict'; let + 1", Context.OptionsRaw],
  ["'use strict'; let let", Context.OptionsRaw],
  ["'use strict'; let { let } = {};", Context.OptionsRaw],
  ['`hello ${10 `test`', Context.OptionsRaw],
  ['class default', Context.OptionsRaw],
  ['class A extends yield B { }', Context.OptionsRaw],
  ['(...a, b) => {}', Context.OptionsRaw],
  ['(...[ 5 ]) => {}', Context.OptionsRaw],
  ['({ 5 }) => {}', Context.OptionsRaw],
  ['([ 5 ]) => {}', Context.OptionsRaw],
  ['({ t(eval) { "use strict"; } });', Context.OptionsRaw],
  ['({ get test() { } }) => 42', Context.OptionsRaw],
  ['f({x = 0})', Context.OptionsRaw],
  ['(localVar |= defaultValue) => {}', Context.OptionsRaw],
  ['obj = {x = 0}', Context.OptionsRaw],
  ['var [x]', Context.OptionsRaw],
  ['if (1) let x = 10;', Context.OptionsRaw],
  [`0 = 0;`, Context.OptionsRaw],
  [`[a] *= 0;`, Context.OptionsRaw],
  [`for([0] of 0);`, Context.OptionsRaw],
  [`\\u{FFFFFFF}")`, Context.OptionsRaw],
  [`for(const a = 0, b;;);`, Context.OptionsRaw],
  [`for (var x of []) function* g() {}`, Context.OptionsRaw],
  [`let [...x = []] = [];`, Context.OptionsRaw | Context.Strict | Context.Module],
  ['for(([a]) of 0);', Context.OptionsRaw | Context.Strict | Context.Module],
  ['(function*yield(){})', Context.OptionsRaw],
  ['({a: b = 0, c = 0});', Context.OptionsRaw],
  [' i #= 42', Context.OptionsRaw],
  ['for(const a = 0 in b);', Context.OptionsRaw],
  ['for (var x = 1 of y);', Context.OptionsRaw],
  ['function*g(){ var yield = 1; }', Context.OptionsRaw],
  ['for (+i in {});', Context.OptionsRaw],
  [' var a = { set foo(...v) {} };', Context.OptionsRaw],
  [' let x,', Context.OptionsRaw],
  ['([a,...b,])=>0;', Context.OptionsRaw],
  ['"use strict"; for (let [a = let];;) {}', Context.OptionsRaw],
  ['export *', Context.OptionsRaw],
  ['import a', Context.OptionsRaw],
  ['new X()."s"', Context.OptionsRaw],
  ['function a([a.b]) {}', Context.OptionsRaw],
  ['`hello ${10 `test`', Context.OptionsRaw],
  [' "\\xx";', Context.OptionsRaw],
  [' ({a:b[0]})=>0', Context.OptionsRaw],
  ['try {} catch (-x) {} ', Context.OptionsRaw],
  [' ({ * })', Context.OptionsRaw],
  ['({ set prop() {} })', Context.OptionsRaw],
  [' function*g() { var yield; }', Context.OptionsRaw],
  ['"use strict" 0123', Context.OptionsRaw],
  [' var {(a)} = 0', Context.OptionsRaw],
  ['�!', Context.OptionsRaw | Context.Strict | Context.Module],
  ['({a:(b = 0)} = 1)', Context.OptionsRaw],
  [' try { }', Context.OptionsRaw],
  ['function *g() { let yield; }', Context.OptionsRaw],
  [' 1.e+z', Context.OptionsRaw],
  [' function f(a, ...b, c){}', Context.OptionsRaw | Context.Strict | Context.Module],
  [' with(true) function a(){}', Context.OptionsRaw | Context.Strict | Context.Module],
  ['({set a([a.b]){}})', Context.OptionsRaw],
  [' var this = 10;', Context.OptionsRaw],
  [' 1.a', Context.OptionsRaw],
  [' ({(a):0})', Context.OptionsRaw],
  ['({a:this}=0)', Context.OptionsRaw],
  ['({a:this}=0)', Context.OptionsRaw],
  ['(class extends a,b {})', Context.OptionsRaw],
  [' [...{a=0},]=0', Context.OptionsRaw],
  ['[...x, ...y] = 0', Context.OptionsRaw | Context.Strict | Context.Module],
  [' for(a in b) function c(){}', Context.OptionsRaw],
  [' ({ *a: 0 })', Context.OptionsRaw],
  [' var super', Context.OptionsRaw],
  [' const x = 0,', Context.OptionsRaw],
  ['(0, {a = 0}) => 0', Context.OptionsRaw],
  [
    `var x = /[a-z Context.OptionsRaw],
      ]/\\ux`,
    Context.OptionsRaw
  ],
  ['"use strict";function foo(){"use strict";}function bar(){var v = 015}', Context.OptionsRaw],
  [' class A {a(){},b(){}}', Context.OptionsRaw],
  [' new f(..g);', Context.OptionsRaw],
  [' for(let a = 0 of b);', Context.OptionsRaw],
  [' var if = 0', Context.OptionsRaw],
  [' [a, ...(b = c)] = 0', Context.OptionsRaw],
  [`if (false) ; else const x = null;`, Context.OptionsRaw],
  [`class A { static set prototype() {} }`, Context.OptionsRaw],
  ['await a', Context.OptionsRaw],
  [' /42', Context.OptionsRaw],
  [' var new A = 0;', Context.OptionsRaw | Context.Strict | Context.Module],
  ['({get ', Context.OptionsRaw],
  ['0b1a', Context.OptionsRaw | Context.Strict | Context.Module],
  ['yield v', Context.OptionsRaw],
  [`class A {static static static(){}}`, Context.OptionsRaw],
  ['(class {a})', Context.OptionsRaw],
  [
    `(function*() {
      function*(x = yield 3) {}
  })`,
    Context.OptionsRaw
  ],
  ['0O18', Context.OptionsRaw],
  ['"use strict"; `${test}\\02`;', Context.OptionsRaw],
  ['for (let [a = let];;) {}', Context.OptionsRaw],
  ['var if = 42', Context.OptionsRaw],
  ['\\', Context.OptionsRaw],
  ["'use strict'; 07", Context.OptionsRaw],
  [`(((a, ...b)))`, Context.OptionsRaw],
  ['((a)) => 42', Context.OptionsRaw],
  ['({a.b} = 0)', Context.OptionsRaw],
  ['[2] = 42', Context.OptionsRaw],
  ['foo/', Context.OptionsRaw | Context.Strict | Context.Module],
  ['if(foo)', Context.OptionsRaw],
  ['for(;;)', Context.OptionsRaw],
  ['for(x in y)', Context.OptionsRaw],
  ['try {} catch(e)', Context.OptionsRaw],
  ['try {} finally', Context.OptionsRaw],
  ['with(x)', Context.OptionsRaw],
  ['label:', Context.OptionsRaw],
  ['foo/ //x', Context.OptionsRaw],
  ['try {} finally//x', Context.OptionsRaw],
  ['try {} catch(e)//x', Context.OptionsRaw],
  ['for( in y);', Context.OptionsRaw | Context.Strict | Context.Module],
  ['for(* in y);', Context.OptionsRaw | Context.Strict | Context.Module],
  ['for(x* in y);', Context.OptionsRaw],
  ['for(a?b:x* in y);', Context.OptionsRaw],
  ['for(a?b:* in y);', Context.OptionsRaw],
  ['for(var x=a* in y);', Context.OptionsRaw | Context.Strict | Context.Module],
  ['for(var x=u?i:a* in y);', Context.OptionsRaw | Context.Strict | Context.Module],
  ['for(*;;);', Context.OptionsRaw],
  ['for(x*;;);', Context.OptionsRaw],
  ['for(a?b:x*;;);', Context.OptionsRaw],
  ['for(a?b:*;;);', Context.OptionsRaw],
  ['for(var x=u?i:a*;;);', Context.OptionsRaw],
  ['for(=x;;);', Context.OptionsRaw],
  ['new', Context.OptionsRaw],
  ['x && new', Context.OptionsRaw],
  ['new\nif(x);', Context.OptionsRaw],
  ['try{}catch(/foo/){}', Context.OptionsRaw | Context.Strict | Context.Module],
  ['try /foo/; catch(e){}', Context.OptionsRaw | Context.Strict | Context.Module],
  ['try{}catch(e)/foo/', Context.OptionsRaw],
  ['try{}finally /foo/', Context.OptionsRaw],
  ['function f(/foo/){}', Context.OptionsRaw],
  ['x=5+y>>>=8', Context.OptionsRaw],
  ['x=5+y>>=8', Context.OptionsRaw],
  ['x=5+y<<=8', Context.OptionsRaw],
  ['x + b <<= y;', Context.OptionsRaw],
  ['x + b <<= y;', Context.OptionsRaw],
  ['x >>>| y;', Context.OptionsRaw | Context.Strict | Context.Module],
  ['5e+', Context.OptionsRaw],
  ['5e*foo', Context.OptionsRaw],
  ["'foo\nbar'", Context.OptionsRaw],
  ["'foo", Context.OptionsRaw],
  ['"foo\nbar"', Context.OptionsRaw],
  ['"foo', Context.OptionsRaw],
  ["'foo\\ubaar", Context.OptionsRaw],
  ["'foo\\xfoo'", Context.OptionsRaw],
  ['x~=y;', Context.OptionsRaw],
  ['/x\ny/', Context.OptionsRaw],
  ['/x[\n]y/', Context.OptionsRaw],
  ['/x\ny/', Context.OptionsRaw],
  ['/foo', Context.OptionsRaw],
  ['/f[oo', Context.OptionsRaw],
  ['do x; y;', Context.OptionsRaw],
  ['x?', Context.OptionsRaw],
  ['x?y:', Context.OptionsRaw],
  ['foo.attr({', Context.OptionsRaw],
  ['foo.attr({x', Context.OptionsRaw],
  ['foo.attr({x:', Context.OptionsRaw],
  ['foo.attr({x:x', Context.OptionsRaw],
  ['var x\n/5', Context.OptionsRaw],
  ['var x=\n/5', Context.OptionsRaw],
  ['var x=5\n/5/', Context.OptionsRaw],
  ['foo++.toString();', Context.OptionsRaw],
  ['{if(x)}', Context.OptionsRaw],
  ['new void foo', Context.OptionsRaw],
  ['new delete foo', Context.OptionsRaw],
  ['new typeof foo', Context.OptionsRaw | Context.Strict | Context.Module],
  ['new ++x', Context.OptionsRaw],
  ['new +x', Context.OptionsRaw],
  ['new --x', Context.OptionsRaw | Context.Strict | Context.Module],
  ['new -x', Context.OptionsRaw],
  ['new ~x', Context.OptionsRaw],
  ['new !x', Context.OptionsRaw],
  ['new ++delete x', Context.OptionsRaw],
  ['a\n--', Context.OptionsRaw],
  ['a\n++', Context.OptionsRaw],
  ['default:y', Context.OptionsRaw],
  ['return.x', Context.OptionsRaw],
  ['return=x', Context.OptionsRaw],
  ['return/x', Context.OptionsRaw],
  ['/)', Context.OptionsRaw | Context.Strict | Context.Module],
  ['+++=x', Context.OptionsRaw],
  ['x -= += y', Context.OptionsRaw],
  ['/foo(bar)', Context.OptionsRaw],
  ['/(foo)bar', Context.OptionsRaw],
  ['/foo(bar)baz', Context.OptionsRaw],
  ['/foo[bar]', Context.OptionsRaw],
  ['/[foo]bar', Context.OptionsRaw],
  ['/foo[bar]baz', Context.OptionsRaw],
  ['/foo(?:bar)', Context.OptionsRaw],
  ['/(?:foo)bar', Context.OptionsRaw],
  ['/foo(?:bar)baz', Context.OptionsRaw],
  ['/foo(!:bar)', Context.OptionsRaw],
  ['/(!:foo)bar', Context.OptionsRaw],
  ['/foo(!:bar)baz', Context.OptionsRaw],
  ['/foo*', Context.OptionsRaw],
  ['/f+oo', Context.OptionsRaw],
  ['/fo+o', Context.OptionsRaw | Context.Strict | Context.Module],
  ['/f.o', Context.OptionsRaw | Context.Strict | Context.Module],
  ['/.oo', Context.OptionsRaw],
  ['--x++', Context.OptionsRaw | Context.Strict | Context.Module],
  ['++x--', Context.OptionsRaw],
  ['--(x)++', Context.OptionsRaw],
  ['++(x)--', Context.OptionsRaw],
  ['yield v', Context.OptionsRaw],
  ['for (const of 42);', Context.OptionsRaw],
  ['({a,,} = 0)', Context.OptionsRaw],
  ['\\001 "use strict";', Context.OptionsRaw],
  ['({function} = 0)', Context.OptionsRaw],
  ['({a: b += 0} = {})', Context.OptionsRaw],
  ['~3 ** 2;', Context.OptionsRaw],
  ['+2** 2;', Context.OptionsRaw],
  ['let {...{...{x, y}}} = {}', Context.OptionsRaw],
  [`(x) = (1) = z`, Context.OptionsRaw],
  [`(x) = (1) += z`, Context.OptionsRaw],
  [`(x) += (1) = z`, Context.OptionsRaw],
  [`()=>{}.foo`, Context.OptionsRaw | Context.Strict | Context.Module],
  [`()=>{}[foo]`, Context.OptionsRaw],
  [`()=>{}(foo)`, Context.OptionsRaw],
  ['()=>{}`foo`', Context.OptionsRaw | Context.Strict | Context.Module],
  [`()=>{}++`, Context.OptionsRaw],
  [`()=>{}--`, Context.OptionsRaw],
  ['++1', Context.OptionsRaw],
  ['function t(...) { }', Context.OptionsRaw],
  ['--1', Context.OptionsRaw],
  ['(...)', Context.OptionsRaw],
  ['(...abc,)', Context.OptionsRaw | Context.Strict | Context.Module],
  ['(...a=b=c)', Context.OptionsRaw],
  ['(...abc,)', Context.OptionsRaw],
  ['(...abc=,)', Context.OptionsRaw],
  ['(...abc,=)', Context.OptionsRaw],
  ['(...abc,,,,,,,=)', Context.OptionsRaw],
  ['(...abc,,,,,,,=====)', Context.OptionsRaw],
  ['(...a=b=c)', Context.OptionsRaw],
  ['(...abc,)', Context.OptionsRaw],
  ['(...)', Context.OptionsRaw],
  ['(...abc,) => {}', Context.OptionsRaw],
  [`([x],)`, Context.OptionsRaw | Context.Strict | Context.Module],
  [`({a},)`, Context.OptionsRaw],
  [`([x] = y,)`, Context.OptionsRaw],
  [`({a} = b,)`, Context.OptionsRaw],
  [`(a,) = x`, Context.OptionsRaw],
  [`(a,b,) = x`, Context.OptionsRaw],
  [`(a = b,) = x`, Context.OptionsRaw],
  ['async function f(){ (fail = class A {async [x](await){}; "x"(){}}) => {} }', Context.OptionsRaw],
  ['(fail = class A {async [x](await){}; "x"(){}}) => {}', Context.OptionsRaw],
  ['(fail = class A {[await x](){}; "x"(){}}) => {}', Context.OptionsRaw],
  [`"use strict"; for (let.x in y);`, Context.OptionsRaw],
  [`"use strict"; for (let() of y);`, Context.OptionsRaw],
  [`for (let() of y);`, Context.OptionsRaw],
  [`for (let[x];;);`, Context.OptionsRaw]
]);
